//! Auto-generated integration tests
//!
//! This module is automatically generated by the build script from test functions
//! marked with #[test_case] attribute. Do not edit manually.

use anyhow::{Result, anyhow};
use miden_client::rpc::Endpoint;
use miden_client::testing::config::ClientConfig;
use miden_client_integration_tests::tests::client::*;
use miden_client_integration_tests::tests::custom_transaction::*;
use miden_client_integration_tests::tests::fpi::*;
use miden_client_integration_tests::tests::network_transaction::*;
use miden_client_integration_tests::tests::onchain::*;
use miden_client_integration_tests::tests::swap_transaction::*;
use url::Url;

/// Auto-generated tokio test wrapper for transaction_request
#[tokio::test]
async fn test_transaction_request() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    transaction_request(client_config).await
}

/// Auto-generated tokio test wrapper for merkle_store
#[tokio::test]
async fn test_merkle_store() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    merkle_store(client_config).await
}

/// Auto-generated tokio test wrapper for onchain_notes_sync_with_tag
#[tokio::test]
async fn test_onchain_notes_sync_with_tag() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    onchain_notes_sync_with_tag(client_config).await
}

/// Auto-generated tokio test wrapper for client_builder_initializes_client_with_endpoint
#[tokio::test]
async fn test_client_builder_initializes_client_with_endpoint() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    client_builder_initializes_client_with_endpoint(client_config).await
}

/// Auto-generated tokio test wrapper for multiple_tx_on_same_block
#[tokio::test]
async fn test_multiple_tx_on_same_block() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    multiple_tx_on_same_block(client_config).await
}

/// Auto-generated tokio test wrapper for import_expected_notes
#[tokio::test]
async fn test_import_expected_notes() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    import_expected_notes(client_config).await
}

/// Auto-generated tokio test wrapper for import_expected_note_uncommitted
#[tokio::test]
async fn test_import_expected_note_uncommitted() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    import_expected_note_uncommitted(client_config).await
}

/// Auto-generated tokio test wrapper for import_expected_notes_from_the_past_as_committed
#[tokio::test]
async fn test_import_expected_notes_from_the_past_as_committed() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    import_expected_notes_from_the_past_as_committed(client_config).await
}

/// Auto-generated tokio test wrapper for get_account_update
#[tokio::test]
async fn test_get_account_update() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    get_account_update(client_config).await
}

/// Auto-generated tokio test wrapper for sync_detail_values
#[tokio::test]
async fn test_sync_detail_values() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    sync_detail_values(client_config).await
}

/// Auto-generated tokio test wrapper for
/// multiple_transactions_can_be_committed_in_different_blocks_without_sync
#[tokio::test]
async fn test_multiple_transactions_can_be_committed_in_different_blocks_without_sync() -> Result<()>
{
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    multiple_transactions_can_be_committed_in_different_blocks_without_sync(client_config).await
}

/// Auto-generated tokio test wrapper for consume_multiple_expected_notes
#[tokio::test]
async fn test_consume_multiple_expected_notes() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    consume_multiple_expected_notes(client_config).await
}

/// Auto-generated tokio test wrapper for import_consumed_note_with_proof
#[tokio::test]
async fn test_import_consumed_note_with_proof() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    import_consumed_note_with_proof(client_config).await
}

/// Auto-generated tokio test wrapper for import_consumed_note_with_id
#[tokio::test]
async fn test_import_consumed_note_with_id() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    import_consumed_note_with_id(client_config).await
}

/// Auto-generated tokio test wrapper for import_note_with_proof
#[tokio::test]
async fn test_import_note_with_proof() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    import_note_with_proof(client_config).await
}

/// Auto-generated tokio test wrapper for discarded_transaction
#[tokio::test]
async fn test_discarded_transaction() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    discarded_transaction(client_config).await
}

/// Auto-generated tokio test wrapper for custom_transaction_prover
#[tokio::test]
async fn test_custom_transaction_prover() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    custom_transaction_prover(client_config).await
}

/// Auto-generated tokio test wrapper for locked_account
#[tokio::test]
async fn test_locked_account() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    locked_account(client_config).await
}

/// Auto-generated tokio test wrapper for expired_transaction_fails
#[tokio::test]
async fn test_expired_transaction_fails() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    expired_transaction_fails(client_config).await
}

/// Auto-generated tokio test wrapper for unused_rpc_api
#[tokio::test]
async fn test_unused_rpc_api() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    unused_rpc_api(client_config).await
}

/// Auto-generated tokio test wrapper for ignore_invalid_notes
#[tokio::test]
async fn test_ignore_invalid_notes() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    ignore_invalid_notes(client_config).await
}

/// Auto-generated tokio test wrapper for output_only_note
#[tokio::test]
async fn test_output_only_note() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    output_only_note(client_config).await
}

/// Auto-generated tokio test wrapper for onchain_notes_flow
#[tokio::test]
async fn test_onchain_notes_flow() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    onchain_notes_flow(client_config).await
}

/// Auto-generated tokio test wrapper for onchain_accounts
#[tokio::test]
async fn test_onchain_accounts() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    onchain_accounts(client_config).await
}

/// Auto-generated tokio test wrapper for import_account_by_id
#[tokio::test]
async fn test_import_account_by_id() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    import_account_by_id(client_config).await
}

/// Auto-generated tokio test wrapper for incorrect_genesis
#[tokio::test]
async fn test_incorrect_genesis() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    incorrect_genesis(client_config).await
}

/// Auto-generated tokio test wrapper for standard_fpi_public
#[tokio::test]
async fn test_standard_fpi_public() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    standard_fpi_public(client_config).await
}

/// Auto-generated tokio test wrapper for standard_fpi_private
#[tokio::test]
async fn test_standard_fpi_private() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    standard_fpi_private(client_config).await
}

/// Auto-generated tokio test wrapper for fpi_execute_program
#[tokio::test]
async fn test_fpi_execute_program() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    fpi_execute_program(client_config).await
}

/// Auto-generated tokio test wrapper for nested_fpi_calls
#[tokio::test]
async fn test_nested_fpi_calls() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    nested_fpi_calls(client_config).await
}

/// Auto-generated tokio test wrapper for counter_contract_ntx
#[tokio::test]
async fn test_counter_contract_ntx() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    counter_contract_ntx(client_config).await
}

/// Auto-generated tokio test wrapper for recall_note_before_ntx_consumes_it
#[tokio::test]
async fn test_recall_note_before_ntx_consumes_it() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    recall_note_before_ntx_consumes_it(client_config).await
}

/// Auto-generated tokio test wrapper for swap_fully_onchain
#[tokio::test]
async fn test_swap_fully_onchain() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    swap_fully_onchain(client_config).await
}

/// Auto-generated tokio test wrapper for swap_private
#[tokio::test]
async fn test_swap_private() -> Result<()> {
    // Use default test configuration
    let endpoint_url = std::env::var("TEST_MIDEN_RPC_ENDPOINT")
        .unwrap_or_else(|_| Endpoint::localhost().to_string());
    let url = Url::parse(&endpoint_url).map_err(|_| anyhow!("Invalid RPC endpoint URL"))?;
    let host = url
        .host_str()
        .ok_or_else(|| anyhow!("RPC endpoint URL is missing a host"))?
        .to_string();
    let port = url.port().ok_or_else(|| anyhow!("RPC endpoint URL is missing a port"))?;
    let endpoint = Endpoint::new(url.scheme().to_string(), host, Some(port));
    let timeout = std::env::var("TEST_TIMEOUT")
        .unwrap_or_else(|_| "10000".to_string())
        .parse::<u64>()
        .map_err(|_| anyhow!("Invalid timeout value"))?;

    let client_config = ClientConfig::new(endpoint, timeout);
    swap_private(client_config).await
}
