diff --git a/Cargo.lock b/Cargo.lock
index b80c6a31..25ce5dc8 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -2190,6 +2190,7 @@ dependencies = [
  "clap 4.5.48",
  "comfy-table",
  "figment",
+ "hex",
  "miden-client",
  "miden-client-sqlite-store",
  "miette",
diff --git a/bin/miden-cli/Cargo.toml b/bin/miden-cli/Cargo.toml
index 83133c18..8b3a270b 100644
--- a/bin/miden-cli/Cargo.toml
+++ b/bin/miden-cli/Cargo.toml
@@ -25,6 +25,7 @@ miden-client-sqlite-store = { package = "miden-client-sqlite-store", path = "../
 clap               = { features = ["derive"], version = "4.5" }
 comfy-table        = { version = "7.1" }
 figment            = { features = ["env", "toml"], version = "0.10" }
+hex                = { workspace = true }
 miette             = { workspace = true }
 rand               = { workspace = true }
 serde              = { features = ["derive"], version = "1.0" }
diff --git a/bin/miden-cli/src/commands/addresses.rs b/bin/miden-cli/src/commands/addresses.rs
new file mode 100644
index 00000000..d6ee5c20
--- /dev/null
+++ b/bin/miden-cli/src/commands/addresses.rs
@@ -0,0 +1,135 @@
+use miden_client::account::{AccountId, AccountIdAddress, AddressInterface};
+use miden_client::address::Address;
+use miden_client::note::NoteExecutionMode;
+use miden_client::{Client, Serializable};
+use tracing::info;
+
+use crate::errors::CliError;
+use crate::utils::parse_account_id;
+use crate::{Parser, create_dynamic_table};
+
+#[derive(Debug, Parser, Clone)]
+#[command(about = "Manage account addresses")]
+pub struct AddressesCmd {
+    /// List all addresses an account can be referenced by.
+    #[arg(short, long, group = "action")]
+    list: bool,
+
+    /// Add a new address.
+    #[arg(short, long, group = "action")]
+    add: bool,
+
+    /// Remove an existing address.
+    #[arg(short, long, group = "action")]
+    remove: bool,
+
+    /// Hex representation of [`AccountId`]
+    #[arg(required = true)]
+    account_id: String,
+
+    /// Interface number for add/remove operations
+    #[arg(required_if_eq_any([("add", "true"), ("remove", "true")]))]
+    interface: Option<String>,
+}
+
+impl AddressesCmd {
+    pub async fn execute<AUTH>(&self, client: Client<AUTH>) -> Result<(), CliError> {
+        match (self.add, self.remove, self.list) {
+            (true, ..) => {
+                // We can safely unwrap interface because it's required when add is true
+                add_address(client, self.account_id.clone(), self.interface.clone().unwrap())
+                    .await?;
+            },
+            (_, true, _) => {
+                // We can safely unwrap interface because it's required when remove is true
+                remove_address(client, self.account_id.clone(), self.interface.clone().unwrap())
+                    .await?;
+            },
+            _ => {
+                list_addresses(client, self.account_id.clone()).await?;
+            },
+        }
+        Ok(())
+    }
+}
+
+// HELPERS
+// ================================================================================================
+async fn list_addresses<AUTH>(client: Client<AUTH>, account_id: String) -> Result<(), CliError> {
+    let id = parse_account_id(&client, &account_id).await?;
+    let addresses = match client.get_account(id).await? {
+        Some(account) => account.addresses().clone(),
+        _ => vec![], // TODO: Maybe return error?
+    };
+
+    println!("Addresses for AccountId {account_id}:");
+    let mut table = create_dynamic_table(&["Address", "Interface"]);
+    for address in addresses {
+        let serialized_address = hex::encode(address.to_bytes());
+        let address_hex = hex::encode(serialized_address);
+        let interface = match address.interface() {
+            AddressInterface::Unspecified => "Unspecified".to_string(),
+            AddressInterface::BasicWallet => "Basic Wallet".to_string(),
+            _ => "Unknown Address Interface".to_string(),
+        };
+
+        table.add_row(vec![address_hex, interface]);
+    }
+
+    println!("{table}");
+
+    Ok(())
+}
+
+fn build_address_from_cli_args(
+    account_id: AccountId,
+    interface: &str,
+) -> Result<Address, CliError> {
+    let interface = match interface {
+        "unspecified" => AddressInterface::Unspecified,
+        "basic_wallet" => AddressInterface::BasicWallet,
+        _ => return Err(CliError::Input("Invalid interface input value".to_string())),
+    };
+    Ok(Address::AccountId(AccountIdAddress::new(account_id, interface)))
+}
+
+async fn add_address<AUTH>(
+    mut client: Client<AUTH>,
+    account_id: String,
+    interface: String,
+) -> Result<(), CliError> {
+    let account_id = parse_account_id(&client, &account_id).await?;
+    let address = build_address_from_cli_args(account_id, &interface)?;
+    let execution_mode = match address.to_note_tag().execution_mode() {
+        NoteExecutionMode::Local => "Local",
+        NoteExecutionMode::Network => "Network",
+    };
+    info!(
+        "adding address - Account Id {} - Execution mode: {}",
+        account_id, execution_mode
+    );
+
+    client.add_address(address, account_id).await?;
+    Ok(())
+}
+
+async fn remove_address<AUTH>(
+    mut client: Client<AUTH>,
+    account_id: String,
+    interface: String,
+) -> Result<(), CliError> {
+    let account_id = parse_account_id(&client, &account_id).await?;
+    let address = build_address_from_cli_args(account_id, &interface)?;
+    let execution_mode = match address.to_note_tag().execution_mode() {
+        NoteExecutionMode::Local => "Local",
+        NoteExecutionMode::Network => "Network",
+    };
+
+    info!(
+        "removing address - Account Id {} - Execution mode: {}",
+        account_id, execution_mode
+    );
+
+    client.remove_address(address, account_id).await?;
+    Ok(())
+}
diff --git a/bin/miden-cli/src/commands/mod.rs b/bin/miden-cli/src/commands/mod.rs
index 9cd2cd9b..13afba86 100644
--- a/bin/miden-cli/src/commands/mod.rs
+++ b/bin/miden-cli/src/commands/mod.rs
@@ -1,4 +1,5 @@
 pub mod account;
+pub mod addresses;
 pub mod exec;
 pub mod export;
 pub mod import;
@@ -7,5 +8,4 @@ pub mod new_account;
 pub mod new_transactions;
 pub mod notes;
 pub mod sync;
-pub mod tags;
 pub mod transactions;
diff --git a/bin/miden-cli/src/commands/tags.rs b/bin/miden-cli/src/commands/tags.rs
deleted file mode 100644
index 854041ab..00000000
--- a/bin/miden-cli/src/commands/tags.rs
+++ /dev/null
@@ -1,85 +0,0 @@
-use miden_client::Client;
-use miden_client::note::{NoteExecutionMode, NoteTag};
-use tracing::info;
-
-use crate::errors::CliError;
-use crate::{Parser, create_dynamic_table};
-
-#[derive(Default, Debug, Parser, Clone)]
-#[command(about = "View and manage tags. Defaults to `list` command")]
-pub struct TagsCmd {
-    /// List all tags monitored by this client.
-    #[arg(short, long, group = "action")]
-    list: bool,
-
-    /// Add a new tag to the list of tags monitored by this client.
-    #[arg(short, long, group = "action", value_name = "tag")]
-    add: Option<u32>,
-
-    /// Removes a tag from the list of tags monitored by this client.
-    #[arg(short, long, group = "action", value_name = "tag")]
-    remove: Option<u32>,
-}
-
-impl TagsCmd {
-    pub async fn execute<AUTH>(&self, client: Client<AUTH>) -> Result<(), CliError> {
-        match self {
-            TagsCmd { add: Some(tag), .. } => {
-                add_tag(client, *tag).await?;
-            },
-            TagsCmd { remove: Some(tag), .. } => {
-                remove_tag(client, *tag).await?;
-            },
-            _ => {
-                list_tags(client).await?;
-            },
-        }
-        Ok(())
-    }
-}
-
-// HELPERS
-// ================================================================================================
-async fn list_tags<AUTH>(client: Client<AUTH>) -> Result<(), CliError> {
-    let mut table = create_dynamic_table(&["Tag", "Source"]);
-
-    let tags = client.get_note_tags().await?;
-
-    for tag in tags {
-        let source = match tag.source {
-            miden_client::sync::NoteTagSource::Account(account_id) => {
-                format!("Account({})", account_id.to_hex())
-            },
-            miden_client::sync::NoteTagSource::Note(note_id) => format!("Note({note_id})"),
-            miden_client::sync::NoteTagSource::User => "User".to_string(),
-        };
-
-        table.add_row(vec![tag.tag.to_string(), source]);
-    }
-
-    println!("\n{table}");
-
-    Ok(())
-}
-
-async fn add_tag<AUTH>(mut client: Client<AUTH>, tag: u32) -> Result<(), CliError> {
-    let tag: NoteTag = tag.into();
-    let execution_mode = match tag.execution_mode() {
-        NoteExecutionMode::Local => "Local",
-        NoteExecutionMode::Network => "Network",
-    };
-    info!(
-        "adding tag - Single Target? {} - Execution mode: {}",
-        tag.is_single_target(),
-        execution_mode
-    );
-    client.add_note_tag(tag).await?;
-    println!("Tag {tag} added");
-    Ok(())
-}
-
-async fn remove_tag<AUTH>(mut client: Client<AUTH>, tag: u32) -> Result<(), CliError> {
-    client.remove_note_tag(tag.into()).await?;
-    println!("Tag {tag} removed");
-    Ok(())
-}
diff --git a/bin/miden-cli/src/lib.rs b/bin/miden-cli/src/lib.rs
index 39e1239b..e70d3200 100644
--- a/bin/miden-cli/src/lib.rs
+++ b/bin/miden-cli/src/lib.rs
@@ -23,10 +23,10 @@ use commands::new_account::{NewAccountCmd, NewWalletCmd};
 use commands::new_transactions::{ConsumeNotesCmd, MintCmd, SendCmd, SwapCmd};
 use commands::notes::NotesCmd;
 use commands::sync::SyncCmd;
-use commands::tags::TagsCmd;
 use commands::transactions::TransactionCmd;
 
 use self::utils::load_config_file;
+use crate::commands::addresses::AddressesCmd;
 
 pub type CliKeyStore = FilesystemKeyStore<StdRng>;
 
@@ -135,7 +135,7 @@ pub enum Command {
     Sync(SyncCmd),
     /// View a summary of the current client state.
     Info,
-    Tags(TagsCmd),
+    Addresses(AddressesCmd),
     #[command(name = "tx")]
     Transaction(TransactionCmd),
     Mint(MintCmd),
@@ -203,7 +203,7 @@ impl Cli {
             Command::Info => info::print_client_info(&client).await,
             Command::Notes(notes) => Box::pin(notes.execute(client)).await,
             Command::Sync(sync) => sync.execute(client).await,
-            Command::Tags(tags) => tags.execute(client).await,
+            Command::Addresses(addresses) => addresses.execute(client).await,
             Command::Transaction(transaction) => transaction.execute(client).await,
             Command::Exec(execute_program) => Box::pin(execute_program.execute(client)).await,
             Command::Export(cmd) => cmd.execute(client, keystore).await,
diff --git a/crates/idxdb-store/src/account/js_bindings.rs b/crates/idxdb-store/src/account/js_bindings.rs
index 0f2808c3..3dc58ea6 100644
--- a/crates/idxdb-store/src/account/js_bindings.rs
+++ b/crates/idxdb-store/src/account/js_bindings.rs
@@ -77,6 +77,9 @@ extern "C" {
     #[wasm_bindgen(js_name = insertAccountAddress)]
     pub fn idxdb_insert_account_address(account_id: String, address: Vec<u8>) -> js_sys::Promise;
 
+    #[wasm_bindgen(js_name = removeAccountAddress)]
+    pub fn idxdb_remove_account_address(address: Vec<u8>) -> js_sys::Promise;
+
     #[wasm_bindgen(js_name = upsertForeignAccountCode)]
     pub fn idxdb_upsert_foreign_account_code(
         account_id: String,
diff --git a/crates/idxdb-store/src/account/mod.rs b/crates/idxdb-store/src/account/mod.rs
index b28f916a..d0b3e103 100644
--- a/crates/idxdb-store/src/account/mod.rs
+++ b/crates/idxdb-store/src/account/mod.rs
@@ -22,7 +22,11 @@ use miden_client::{Felt, Word};
 use super::WebStore;
 use crate::account::js_bindings::idxdb_get_account_addresses;
 use crate::account::models::AddressIdxdbObject;
-use crate::account::utils::{insert_account_address, parse_account_address_idxdb_object};
+use crate::account::utils::{
+    insert_account_address,
+    parse_account_address_idxdb_object,
+    remove_account_address,
+};
 use crate::promise::{await_js, await_js_value};
 
 mod js_bindings;
@@ -261,9 +265,13 @@ impl WebStore {
             StoreError::DatabaseError(format!("failed to insert account record: {js_error:?}",))
         })?;
 
-        insert_account_address(account, initial_address).await.map_err(|js_error| {
-            StoreError::DatabaseError(format!("failed to insert account addresses: {js_error:?}",))
-        })?;
+        insert_account_address(&account.id(), initial_address)
+            .await
+            .map_err(|js_error| {
+                StoreError::DatabaseError(format!(
+                    "failed to insert account addresses: {js_error:?}",
+                ))
+            })?;
 
         Ok(())
     }
@@ -387,4 +395,22 @@ impl WebStore {
 
         Ok(())
     }
+
+    pub(crate) async fn insert_address(
+        &self,
+        address: Address,
+        account_id: &AccountId,
+    ) -> Result<(), StoreError> {
+        insert_account_address(account_id, address).await.map_err(|js_error| {
+            StoreError::DatabaseError(format!("failed to insert account addresses: {js_error:?}",))
+        })?;
+
+        Ok(())
+    }
+
+    pub(crate) async fn remove_address(&self, address: Address) -> Result<(), StoreError> {
+        remove_account_address(address).await.map_err(|js_error| {
+            StoreError::DatabaseError(format!("failed to remove account address: {js_error:?}"))
+        })
+    }
 }
diff --git a/crates/idxdb-store/src/account/utils.rs b/crates/idxdb-store/src/account/utils.rs
index f32850ba..5a9da536 100644
--- a/crates/idxdb-store/src/account/utils.rs
+++ b/crates/idxdb-store/src/account/utils.rs
@@ -97,8 +97,11 @@ pub async fn upsert_account_record(account: &Account) -> Result<(), JsValue> {
     Ok(())
 }
 
-pub async fn insert_account_address(account: &Account, address: Address) -> Result<(), JsValue> {
-    let account_id_str = account.id().to_string();
+pub async fn insert_account_address(
+    account_id: &AccountId,
+    address: Address,
+) -> Result<(), JsValue> {
+    let account_id_str = account_id.to_string();
     let serialized_address = address.to_bytes();
     let promise = idxdb_insert_account_address(account_id_str, serialized_address);
     JsFuture::from(promise).await?;
@@ -106,6 +109,15 @@ pub async fn insert_account_address(account: &Account, address: Address) -> Resu
     Ok(())
 }
 
+pub async fn remove_account_address(address: Address) -> Result<(), JsValue> {
+    let serialized_address = address.to_bytes();
+    let promise =
+        crate::account::js_bindings::idxdb_remove_account_address(serialized_address.clone());
+    JsFuture::from(promise).await?;
+
+    Ok(())
+}
+
 pub fn parse_account_record_idxdb_object(
     account_header_idxdb: AccountRecordIdxdbObject,
 ) -> Result<(AccountHeader, AccountStatus), StoreError> {
diff --git a/crates/idxdb-store/src/js/accounts.d.ts b/crates/idxdb-store/src/js/accounts.d.ts
index fa429f9d..3d637533 100644
--- a/crates/idxdb-store/src/js/accounts.d.ts
+++ b/crates/idxdb-store/src/js/accounts.d.ts
@@ -54,6 +54,7 @@ export declare function upsertVaultAssets(assets: JsVaultAsset[]): Promise<void>
 export declare function upsertAccountRecord(accountId: string, codeRoot: string, storageRoot: string, vaultRoot: string, nonce: string, committed: boolean, commitment: string, accountSeed: Uint8Array | undefined): Promise<void>;
 export declare function insertAccountAuth(pubKey: string, secretKey: string): Promise<void>;
 export declare function insertAccountAddress(address: Uint8Array, accountId: string): Promise<void>;
+export declare function removeAccountAddress(address: Uint8Array): Promise<void>;
 export declare function upsertForeignAccountCode(accountId: string, code: Uint8Array, codeRoot: string): Promise<void>;
 export declare function getForeignAccountCode(accountIds: string[]): Promise<{
     accountId: string;
diff --git a/crates/idxdb-store/src/js/accounts.js b/crates/idxdb-store/src/js/accounts.js
index abc5e35c..84b95646 100644
--- a/crates/idxdb-store/src/js/accounts.js
+++ b/crates/idxdb-store/src/js/accounts.js
@@ -348,6 +348,15 @@ export async function insertAccountAddress(address, accountId) {
         logWebStoreError(error, `Error inserting address with value: ${String(address)} for the account ID ${accountId}`);
     }
 }
+export async function removeAccountAddress(address) {
+    try {
+        // Perform the delete using Dexie
+        await addresses.where("address").equals(address).delete();
+    }
+    catch (error) {
+        logWebStoreError(error, `Error removing address with value: ${String(address)}`);
+    }
+}
 export async function upsertForeignAccountCode(accountId, code, codeRoot) {
     try {
         await upsertAccountCode(codeRoot, code);
diff --git a/crates/idxdb-store/src/js/accounts.js.map b/crates/idxdb-store/src/js/accounts.js.map
index fc896d68..cccb6370 100644
--- a/crates/idxdb-store/src/js/accounts.js.map
+++ b/crates/idxdb-store/src/js/accounts.js.map
@@ -1 +1 @@
-{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../ts/accounts.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../ts/accounts.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/crates/idxdb-store/src/lib.rs b/crates/idxdb-store/src/lib.rs
index 7b9207ec..af937d2f 100644
--- a/crates/idxdb-store/src/lib.rs
+++ b/crates/idxdb-store/src/lib.rs
@@ -273,6 +273,32 @@ impl Store for WebStore {
         self.get_account_addresses(account_id).await
     }
 
+    async fn insert_address(
+        &self,
+        address: Address,
+        account_id: AccountId,
+    ) -> Result<(), StoreError> {
+        let derived_note_tag = address.to_note_tag();
+        let note_tag_record = NoteTagRecord::with_account_source(derived_note_tag, account_id);
+        let already_taken = self.add_note_tag(note_tag_record).await?;
+        if already_taken {
+            return Err(StoreError::NoteTagAlreadyTracked(u64::from(derived_note_tag.as_u32())));
+        }
+
+        self.insert_address(address, &account_id).await
+    }
+
+    async fn remove_address(
+        &self,
+        address: Address,
+        account_id: AccountId,
+    ) -> Result<(), StoreError> {
+        let derived_note_tag = address.to_note_tag();
+        let note_tag_record = NoteTagRecord::with_account_source(derived_note_tag, account_id);
+        self.remove_note_tag(note_tag_record).await?;
+        self.remove_address(address).await
+    }
+
     // SETTINGS
     // --------------------------------------------------------------------------------------------
 
diff --git a/crates/idxdb-store/src/ts/accounts.ts b/crates/idxdb-store/src/ts/accounts.ts
index 3019320a..60c05396 100644
--- a/crates/idxdb-store/src/ts/accounts.ts
+++ b/crates/idxdb-store/src/ts/accounts.ts
@@ -440,6 +440,18 @@ export async function insertAccountAddress(
   }
 }
 
+export async function removeAccountAddress(address: Uint8Array) {
+  try {
+    // Perform the delete using Dexie
+    await addresses.where("address").equals(address).delete();
+  } catch (error) {
+    logWebStoreError(
+      error,
+      `Error removing address with value: ${String(address)}`
+    );
+  }
+}
+
 export async function upsertForeignAccountCode(
   accountId: string,
   code: Uint8Array,
diff --git a/crates/idxdb-store/src/tsconfig.tsbuildinfo b/crates/idxdb-store/src/tsconfig.tsbuildinfo
index 9b1e4edc..a5918121 100644
--- a/crates/idxdb-store/src/tsconfig.tsbuildinfo
+++ b/crates/idxdb-store/src/tsconfig.tsbuildinfo
@@ -1 +1 @@
-{"fileNames":["./node_modules/typescript/lib/lib.es5.d.ts","./node_modules/typescript/lib/lib.es2015.d.ts","./node_modules/typescript/lib/lib.es2016.d.ts","./node_modules/typescript/lib/lib.es2017.d.ts","./node_modules/typescript/lib/lib.es2018.d.ts","./node_modules/typescript/lib/lib.es2019.d.ts","./node_modules/typescript/lib/lib.es2020.d.ts","./node_modules/typescript/lib/lib.es2021.d.ts","./node_modules/typescript/lib/lib.es2022.d.ts","./node_modules/typescript/lib/lib.es2023.d.ts","./node_modules/typescript/lib/lib.es2024.d.ts","./node_modules/typescript/lib/lib.esnext.d.ts","./node_modules/typescript/lib/lib.dom.d.ts","./node_modules/typescript/lib/lib.dom.iterable.d.ts","./node_modules/typescript/lib/lib.dom.asynciterable.d.ts","./node_modules/typescript/lib/lib.webworker.importscripts.d.ts","./node_modules/typescript/lib/lib.scripthost.d.ts","./node_modules/typescript/lib/lib.es2015.core.d.ts","./node_modules/typescript/lib/lib.es2015.collection.d.ts","./node_modules/typescript/lib/lib.es2015.generator.d.ts","./node_modules/typescript/lib/lib.es2015.iterable.d.ts","./node_modules/typescript/lib/lib.es2015.promise.d.ts","./node_modules/typescript/lib/lib.es2015.proxy.d.ts","./node_modules/typescript/lib/lib.es2015.reflect.d.ts","./node_modules/typescript/lib/lib.es2015.symbol.d.ts","./node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","./node_modules/typescript/lib/lib.es2016.array.include.d.ts","./node_modules/typescript/lib/lib.es2016.intl.d.ts","./node_modules/typescript/lib/lib.es2017.arraybuffer.d.ts","./node_modules/typescript/lib/lib.es2017.date.d.ts","./node_modules/typescript/lib/lib.es2017.object.d.ts","./node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2017.string.d.ts","./node_modules/typescript/lib/lib.es2017.intl.d.ts","./node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","./node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","./node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","./node_modules/typescript/lib/lib.es2018.intl.d.ts","./node_modules/typescript/lib/lib.es2018.promise.d.ts","./node_modules/typescript/lib/lib.es2018.regexp.d.ts","./node_modules/typescript/lib/lib.es2019.array.d.ts","./node_modules/typescript/lib/lib.es2019.object.d.ts","./node_modules/typescript/lib/lib.es2019.string.d.ts","./node_modules/typescript/lib/lib.es2019.symbol.d.ts","./node_modules/typescript/lib/lib.es2019.intl.d.ts","./node_modules/typescript/lib/lib.es2020.bigint.d.ts","./node_modules/typescript/lib/lib.es2020.date.d.ts","./node_modules/typescript/lib/lib.es2020.promise.d.ts","./node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2020.string.d.ts","./node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","./node_modules/typescript/lib/lib.es2020.intl.d.ts","./node_modules/typescript/lib/lib.es2020.number.d.ts","./node_modules/typescript/lib/lib.es2021.promise.d.ts","./node_modules/typescript/lib/lib.es2021.string.d.ts","./node_modules/typescript/lib/lib.es2021.weakref.d.ts","./node_modules/typescript/lib/lib.es2021.intl.d.ts","./node_modules/typescript/lib/lib.es2022.array.d.ts","./node_modules/typescript/lib/lib.es2022.error.d.ts","./node_modules/typescript/lib/lib.es2022.intl.d.ts","./node_modules/typescript/lib/lib.es2022.object.d.ts","./node_modules/typescript/lib/lib.es2022.string.d.ts","./node_modules/typescript/lib/lib.es2022.regexp.d.ts","./node_modules/typescript/lib/lib.es2023.array.d.ts","./node_modules/typescript/lib/lib.es2023.collection.d.ts","./node_modules/typescript/lib/lib.es2023.intl.d.ts","./node_modules/typescript/lib/lib.es2024.arraybuffer.d.ts","./node_modules/typescript/lib/lib.es2024.collection.d.ts","./node_modules/typescript/lib/lib.es2024.object.d.ts","./node_modules/typescript/lib/lib.es2024.promise.d.ts","./node_modules/typescript/lib/lib.es2024.regexp.d.ts","./node_modules/typescript/lib/lib.es2024.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2024.string.d.ts","./node_modules/typescript/lib/lib.esnext.array.d.ts","./node_modules/typescript/lib/lib.esnext.collection.d.ts","./node_modules/typescript/lib/lib.esnext.intl.d.ts","./node_modules/typescript/lib/lib.esnext.disposable.d.ts","./node_modules/typescript/lib/lib.esnext.promise.d.ts","./node_modules/typescript/lib/lib.esnext.decorators.d.ts","./node_modules/typescript/lib/lib.esnext.iterator.d.ts","./node_modules/typescript/lib/lib.esnext.float16.d.ts","./node_modules/typescript/lib/lib.esnext.error.d.ts","./node_modules/typescript/lib/lib.esnext.sharedmemory.d.ts","./node_modules/typescript/lib/lib.decorators.d.ts","./node_modules/typescript/lib/lib.decorators.legacy.d.ts","./node_modules/typescript/lib/lib.esnext.full.d.ts","./node_modules/dexie/dist/dexie.d.ts","./ts/utils.ts","./ts/schema.ts","./ts/transactions.ts","./ts/notes.ts","./ts/sync.ts","./ts/accounts.ts","./ts/chaindata.ts","./ts/export.ts","./ts/import.ts","./ts/settings.ts","./node_modules/@types/estree/index.d.ts","./node_modules/@types/json-schema/index.d.ts"],"fileIdsList":[[88,89,92],[88,89],[87,88],[87,88,89,90,91,93],[87,88,89],[87]],"fileInfos":[{"version":"c430d44666289dae81f30fa7b2edebf186ecc91a2d4c71266ea6ae76388792e1","affectsGlobalScope":true,"impliedFormat":1},{"version":"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","impliedFormat":1},{"version":"3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","impliedFormat":1},{"version":"e44bb8bbac7f10ecc786703fe0a6a4b952189f908707980ba8f3c8975a760962","impliedFormat":1},{"version":"5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","impliedFormat":1},{"version":"68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","impliedFormat":1},{"version":"5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","impliedFormat":1},{"version":"feecb1be483ed332fad555aff858affd90a48ab19ba7272ee084704eb7167569","impliedFormat":1},{"version":"ee7bad0c15b58988daa84371e0b89d313b762ab83cb5b31b8a2d1162e8eb41c2","impliedFormat":1},{"version":"27bdc30a0e32783366a5abeda841bc22757c1797de8681bbe81fbc735eeb1c10","impliedFormat":1},{"version":"8fd575e12870e9944c7e1d62e1f5a73fcf23dd8d3a321f2a2c74c20d022283fe","impliedFormat":1},{"version":"2ab096661c711e4a81cc464fa1e6feb929a54f5340b46b0a07ac6bbf857471f0","impliedFormat":1},{"version":"080941d9f9ff9307f7e27a83bcd888b7c8270716c39af943532438932ec1d0b9","affectsGlobalScope":true,"impliedFormat":1},{"version":"2e80ee7a49e8ac312cc11b77f1475804bee36b3b2bc896bead8b6e1266befb43","affectsGlobalScope":true,"impliedFormat":1},{"version":"d7a3c8b952931daebdfc7a2897c53c0a1c73624593fa070e46bd537e64dcd20a","affectsGlobalScope":true,"impliedFormat":1},{"version":"80e18897e5884b6723488d4f5652167e7bb5024f946743134ecc4aa4ee731f89","affectsGlobalScope":true,"impliedFormat":1},{"version":"cd034f499c6cdca722b60c04b5b1b78e058487a7085a8e0d6fb50809947ee573","affectsGlobalScope":true,"impliedFormat":1},{"version":"c57796738e7f83dbc4b8e65132f11a377649c00dd3eee333f672b8f0a6bea671","affectsGlobalScope":true,"impliedFormat":1},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true,"impliedFormat":1},{"version":"515d0b7b9bea2e31ea4ec968e9edd2c39d3eebf4a2d5cbd04e88639819ae3b71","affectsGlobalScope":true,"impliedFormat":1},{"version":"0559b1f683ac7505ae451f9a96ce4c3c92bdc71411651ca6ddb0e88baaaad6a3","affectsGlobalScope":true,"impliedFormat":1},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true,"impliedFormat":1},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true,"impliedFormat":1},{"version":"fb0f136d372979348d59b3f5020b4cdb81b5504192b1cacff5d1fbba29378aa1","affectsGlobalScope":true,"impliedFormat":1},{"version":"d15bea3d62cbbdb9797079416b8ac375ae99162a7fba5de2c6c505446486ac0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"68d18b664c9d32a7336a70235958b8997ebc1c3b8505f4f1ae2b7e7753b87618","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb3d66c8327153d8fa7dd03f9c58d351107fe824c79e9b56b462935176cdf12a","affectsGlobalScope":true,"impliedFormat":1},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true,"impliedFormat":1},{"version":"69ab18c3b76cd9b1be3d188eaf8bba06112ebbe2f47f6c322b5105a6fbc45a2e","affectsGlobalScope":true,"impliedFormat":1},{"version":"a680117f487a4d2f30ea46f1b4b7f58bef1480456e18ba53ee85c2746eeca012","affectsGlobalScope":true,"impliedFormat":1},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true,"impliedFormat":1},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true,"impliedFormat":1},{"version":"954296b30da6d508a104a3a0b5d96b76495c709785c1d11610908e63481ee667","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac9538681b19688c8eae65811b329d3744af679e0bdfa5d842d0e32524c73e1c","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a969edff4bd52585473d24995c5ef223f6652d6ef46193309b3921d65dd4376","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e9fbd7030c440b33d021da145d3232984c8bb7916f277e8ffd3dc2e3eae2bdb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true,"impliedFormat":1},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true,"impliedFormat":1},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true,"impliedFormat":1},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true,"impliedFormat":1},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true,"impliedFormat":1},{"version":"74f7fa2d027d5b33eb0471c8e82a6c87216223181ec31247c357a3e8e2fddc5b","affectsGlobalScope":true,"impliedFormat":1},{"version":"d6d7ae4d1f1f3772e2a3cde568ed08991a8ae34a080ff1151af28b7f798e22ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true,"impliedFormat":1},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true,"impliedFormat":1},{"version":"52ada8e0b6e0482b728070b7639ee42e83a9b1c22d205992756fe020fd9f4a47","affectsGlobalScope":true,"impliedFormat":1},{"version":"3bdefe1bfd4d6dee0e26f928f93ccc128f1b64d5d501ff4a8cf3c6371200e5e6","affectsGlobalScope":true,"impliedFormat":1},{"version":"59fb2c069260b4ba00b5643b907ef5d5341b167e7d1dbf58dfd895658bda2867","affectsGlobalScope":true,"impliedFormat":1},{"version":"639e512c0dfc3fad96a84caad71b8834d66329a1f28dc95e3946c9b58176c73a","affectsGlobalScope":true,"impliedFormat":1},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true,"impliedFormat":1},{"version":"af3dd424cf267428f30ccfc376f47a2c0114546b55c44d8c0f1d57d841e28d74","affectsGlobalScope":true,"impliedFormat":1},{"version":"995c005ab91a498455ea8dfb63aa9f83fa2ea793c3d8aa344be4a1678d06d399","affectsGlobalScope":true,"impliedFormat":1},{"version":"959d36cddf5e7d572a65045b876f2956c973a586da58e5d26cde519184fd9b8a","affectsGlobalScope":true,"impliedFormat":1},{"version":"965f36eae237dd74e6cca203a43e9ca801ce38824ead814728a2807b1910117d","affectsGlobalScope":true,"impliedFormat":1},{"version":"3925a6c820dcb1a06506c90b1577db1fdbf7705d65b62b99dce4be75c637e26b","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a3d63ef2b853447ec4f749d3f368ce642264246e02911fcb1590d8c161b8005","affectsGlobalScope":true,"impliedFormat":1},{"version":"8cdf8847677ac7d20486e54dd3fcf09eda95812ac8ace44b4418da1bbbab6eb8","affectsGlobalScope":true,"impliedFormat":1},{"version":"8444af78980e3b20b49324f4a16ba35024fef3ee069a0eb67616ea6ca821c47a","affectsGlobalScope":true,"impliedFormat":1},{"version":"3287d9d085fbd618c3971944b65b4be57859f5415f495b33a6adc994edd2f004","affectsGlobalScope":true,"impliedFormat":1},{"version":"b4b67b1a91182421f5df999988c690f14d813b9850b40acd06ed44691f6727ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"df83c2a6c73228b625b0beb6669c7ee2a09c914637e2d35170723ad49c0f5cd4","affectsGlobalScope":true,"impliedFormat":1},{"version":"436aaf437562f276ec2ddbee2f2cdedac7664c1e4c1d2c36839ddd582eeb3d0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e3c06ea092138bf9fa5e874a1fdbc9d54805d074bee1de31b99a11e2fec239d","affectsGlobalScope":true,"impliedFormat":1},{"version":"87dc0f382502f5bbce5129bdc0aea21e19a3abbc19259e0b43ae038a9fc4e326","affectsGlobalScope":true,"impliedFormat":1},{"version":"b1cb28af0c891c8c96b2d6b7be76bd394fddcfdb4709a20ba05a7c1605eea0f9","affectsGlobalScope":true,"impliedFormat":1},{"version":"2fef54945a13095fdb9b84f705f2b5994597640c46afeb2ce78352fab4cb3279","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac77cb3e8c6d3565793eb90a8373ee8033146315a3dbead3bde8db5eaf5e5ec6","affectsGlobalScope":true,"impliedFormat":1},{"version":"56e4ed5aab5f5920980066a9409bfaf53e6d21d3f8d020c17e4de584d29600ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ece9f17b3866cc077099c73f4983bddbcb1dc7ddb943227f1ec070f529dedd1","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a6282c8827e4b9a95f4bf4f5c205673ada31b982f50572d27103df8ceb8013c","affectsGlobalScope":true,"impliedFormat":1},{"version":"1c9319a09485199c1f7b0498f2988d6d2249793ef67edda49d1e584746be9032","affectsGlobalScope":true,"impliedFormat":1},{"version":"e3a2a0cee0f03ffdde24d89660eba2685bfbdeae955a6c67e8c4c9fd28928eeb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811c71eee4aa0ac5f7adf713323a5c41b0cf6c4e17367a34fbce379e12bbf0a4","affectsGlobalScope":true,"impliedFormat":1},{"version":"51ad4c928303041605b4d7ae32e0c1ee387d43a24cd6f1ebf4a2699e1076d4fa","affectsGlobalScope":true,"impliedFormat":1},{"version":"60037901da1a425516449b9a20073aa03386cce92f7a1fd902d7602be3a7c2e9","affectsGlobalScope":true,"impliedFormat":1},{"version":"d4b1d2c51d058fc21ec2629fff7a76249dec2e36e12960ea056e3ef89174080f","affectsGlobalScope":true,"impliedFormat":1},{"version":"22adec94ef7047a6c9d1af3cb96be87a335908bf9ef386ae9fd50eeb37f44c47","affectsGlobalScope":true,"impliedFormat":1},{"version":"4245fee526a7d1754529d19227ecbf3be066ff79ebb6a380d78e41648f2f224d","affectsGlobalScope":true,"impliedFormat":1},{"version":"73f78680d4c08509933daf80947902f6ff41b6230f94dd002ae372620adb0f60","affectsGlobalScope":true,"impliedFormat":1},{"version":"c5239f5c01bcfa9cd32f37c496cf19c61d69d37e48be9de612b541aac915805b","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e7f8264d0fb4c5339605a15daadb037bf238c10b654bb3eee14208f860a32ea","affectsGlobalScope":true,"impliedFormat":1},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true,"impliedFormat":1},{"version":"bde31fd423cd93b0eff97197a3f66df7c93e8c0c335cbeb113b7ff1ac35c23f4","impliedFormat":1},{"version":"89c5457ba4071e4c53a700195bc8e676ffa9cd0de990081e4911e71ba48316f0","affectsGlobalScope":true,"impliedFormat":1},{"version":"32df82919876280b76352a67ad8b6a3aa37f2ef49e9e60118c60dadcf08dc032","signature":"9ef4472ab03740503457dee2391c07de116685c333a40363590b9845d2989764"},{"version":"1bca27b5bf4c9f1b0751fd8a49b9977759861c56be999925fcc59cba354119ab","signature":"9d53c167fe2565fc093e63e018f57a613cee5b253bae2471230a5ebb7bab168e"},{"version":"364cc6ea06b1a620e955587bf820847fe6e3bb8f2a3d59cdf9a668aa2a4784db","signature":"2387a845165ef276caeb840dadad0287080b9634fd7c0cc0151175c31105270e"},{"version":"fd5b45663197c9093fc9da6f51eba7145f72256a7aedc051e84bcaa0a7b16800","signature":"14d5d080396c5b95bc7a406a46ba1519814f6e4b688f733c86e3f3787af3b520"},{"version":"39858bcf63b5423def8141f94cbaa6ac836ac226d66516e19732ef679aae15d2","signature":"a8da7d90a5cf974aa708a677a894632aa819877a2239da39fc1dbf9269030a3e"},{"version":"31a430b3cbd369f446fa5e2a37303cc3ac15fcca1d20bd3c71f11f4ea8ec1345","signature":"13b82b2d79886ad761be12543fe448906d24d101500c81c8dc6d64e09804a6f0"},{"version":"70e736447e467ca8bb14c4ee0778cc00e5ba7d865bbc715acf38c7c8d4d42f41","signature":"2a8f48ac4f5ecff2f963a553e6d5cd7d75daa1ca54957e6a5529b00232c93dc2"},{"version":"5198fe2b20994eb8ce29066b12e2cf6830f404e81e667058a99590c8825bbdb7","signature":"fbc663063a706edce82ca36e81085a54e9b412d60f638a1d84100552cc193cfc"},{"version":"a2ce3d3bba32ece20e938fbea55bc069d66f6c671ece28e481712971d6067d63","signature":"f69b536df9fd1382e82e671912b9f5985582aa0cb6faf8d1b7288463b7726d3a"},{"version":"08bb0830cad3d892eee782a296c9ca86b94cdd55cc702ac57e7b619f3ce8d7b0","signature":"705db0454bcfec04a6fbb402805ad893a0de08c4319388873e3abf0d279388e7"},{"version":"151ff381ef9ff8da2da9b9663ebf657eac35c4c9a19183420c05728f31a6761d","impliedFormat":1},{"version":"f3d8c757e148ad968f0d98697987db363070abada5f503da3c06aefd9d4248c1","impliedFormat":1}],"root":[[88,97]],"options":{"allowJs":true,"checkJs":false,"declaration":true,"module":99,"noEmitOnError":true,"outDir":"./js","removeComments":false,"sourceMap":true,"strict":true,"target":99,"tsBuildInfoFile":"./tsconfig.tsbuildinfo"},"referencedMap":[[93,1],[94,2],[95,2],[96,2],[91,2],[89,3],[97,2],[92,4],[90,5],[88,6]],"version":"5.9.2"}
\ No newline at end of file
+{"fileNames":["./node_modules/typescript/lib/lib.es5.d.ts","./node_modules/typescript/lib/lib.es2015.d.ts","./node_modules/typescript/lib/lib.es2016.d.ts","./node_modules/typescript/lib/lib.es2017.d.ts","./node_modules/typescript/lib/lib.es2018.d.ts","./node_modules/typescript/lib/lib.es2019.d.ts","./node_modules/typescript/lib/lib.es2020.d.ts","./node_modules/typescript/lib/lib.es2021.d.ts","./node_modules/typescript/lib/lib.es2022.d.ts","./node_modules/typescript/lib/lib.es2023.d.ts","./node_modules/typescript/lib/lib.es2024.d.ts","./node_modules/typescript/lib/lib.esnext.d.ts","./node_modules/typescript/lib/lib.dom.d.ts","./node_modules/typescript/lib/lib.dom.iterable.d.ts","./node_modules/typescript/lib/lib.dom.asynciterable.d.ts","./node_modules/typescript/lib/lib.webworker.importscripts.d.ts","./node_modules/typescript/lib/lib.scripthost.d.ts","./node_modules/typescript/lib/lib.es2015.core.d.ts","./node_modules/typescript/lib/lib.es2015.collection.d.ts","./node_modules/typescript/lib/lib.es2015.generator.d.ts","./node_modules/typescript/lib/lib.es2015.iterable.d.ts","./node_modules/typescript/lib/lib.es2015.promise.d.ts","./node_modules/typescript/lib/lib.es2015.proxy.d.ts","./node_modules/typescript/lib/lib.es2015.reflect.d.ts","./node_modules/typescript/lib/lib.es2015.symbol.d.ts","./node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","./node_modules/typescript/lib/lib.es2016.array.include.d.ts","./node_modules/typescript/lib/lib.es2016.intl.d.ts","./node_modules/typescript/lib/lib.es2017.arraybuffer.d.ts","./node_modules/typescript/lib/lib.es2017.date.d.ts","./node_modules/typescript/lib/lib.es2017.object.d.ts","./node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2017.string.d.ts","./node_modules/typescript/lib/lib.es2017.intl.d.ts","./node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","./node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","./node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","./node_modules/typescript/lib/lib.es2018.intl.d.ts","./node_modules/typescript/lib/lib.es2018.promise.d.ts","./node_modules/typescript/lib/lib.es2018.regexp.d.ts","./node_modules/typescript/lib/lib.es2019.array.d.ts","./node_modules/typescript/lib/lib.es2019.object.d.ts","./node_modules/typescript/lib/lib.es2019.string.d.ts","./node_modules/typescript/lib/lib.es2019.symbol.d.ts","./node_modules/typescript/lib/lib.es2019.intl.d.ts","./node_modules/typescript/lib/lib.es2020.bigint.d.ts","./node_modules/typescript/lib/lib.es2020.date.d.ts","./node_modules/typescript/lib/lib.es2020.promise.d.ts","./node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2020.string.d.ts","./node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","./node_modules/typescript/lib/lib.es2020.intl.d.ts","./node_modules/typescript/lib/lib.es2020.number.d.ts","./node_modules/typescript/lib/lib.es2021.promise.d.ts","./node_modules/typescript/lib/lib.es2021.string.d.ts","./node_modules/typescript/lib/lib.es2021.weakref.d.ts","./node_modules/typescript/lib/lib.es2021.intl.d.ts","./node_modules/typescript/lib/lib.es2022.array.d.ts","./node_modules/typescript/lib/lib.es2022.error.d.ts","./node_modules/typescript/lib/lib.es2022.intl.d.ts","./node_modules/typescript/lib/lib.es2022.object.d.ts","./node_modules/typescript/lib/lib.es2022.string.d.ts","./node_modules/typescript/lib/lib.es2022.regexp.d.ts","./node_modules/typescript/lib/lib.es2023.array.d.ts","./node_modules/typescript/lib/lib.es2023.collection.d.ts","./node_modules/typescript/lib/lib.es2023.intl.d.ts","./node_modules/typescript/lib/lib.es2024.arraybuffer.d.ts","./node_modules/typescript/lib/lib.es2024.collection.d.ts","./node_modules/typescript/lib/lib.es2024.object.d.ts","./node_modules/typescript/lib/lib.es2024.promise.d.ts","./node_modules/typescript/lib/lib.es2024.regexp.d.ts","./node_modules/typescript/lib/lib.es2024.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2024.string.d.ts","./node_modules/typescript/lib/lib.esnext.array.d.ts","./node_modules/typescript/lib/lib.esnext.collection.d.ts","./node_modules/typescript/lib/lib.esnext.intl.d.ts","./node_modules/typescript/lib/lib.esnext.disposable.d.ts","./node_modules/typescript/lib/lib.esnext.promise.d.ts","./node_modules/typescript/lib/lib.esnext.decorators.d.ts","./node_modules/typescript/lib/lib.esnext.iterator.d.ts","./node_modules/typescript/lib/lib.esnext.float16.d.ts","./node_modules/typescript/lib/lib.esnext.error.d.ts","./node_modules/typescript/lib/lib.esnext.sharedmemory.d.ts","./node_modules/typescript/lib/lib.decorators.d.ts","./node_modules/typescript/lib/lib.decorators.legacy.d.ts","./node_modules/typescript/lib/lib.esnext.full.d.ts","./node_modules/dexie/dist/dexie.d.ts","./ts/utils.ts","./ts/schema.ts","./ts/transactions.ts","./ts/notes.ts","./ts/sync.ts","./ts/accounts.ts","./ts/chaindata.ts","./ts/export.ts","./ts/import.ts","./ts/settings.ts","./node_modules/@types/estree/index.d.ts","./node_modules/@types/json-schema/index.d.ts"],"fileIdsList":[[88,89,92],[88,89],[87,88],[87,88,89,90,91,93],[87,88,89],[87]],"fileInfos":[{"version":"c430d44666289dae81f30fa7b2edebf186ecc91a2d4c71266ea6ae76388792e1","affectsGlobalScope":true,"impliedFormat":1},{"version":"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","impliedFormat":1},{"version":"3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","impliedFormat":1},{"version":"e44bb8bbac7f10ecc786703fe0a6a4b952189f908707980ba8f3c8975a760962","impliedFormat":1},{"version":"5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","impliedFormat":1},{"version":"68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","impliedFormat":1},{"version":"5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","impliedFormat":1},{"version":"feecb1be483ed332fad555aff858affd90a48ab19ba7272ee084704eb7167569","impliedFormat":1},{"version":"ee7bad0c15b58988daa84371e0b89d313b762ab83cb5b31b8a2d1162e8eb41c2","impliedFormat":1},{"version":"27bdc30a0e32783366a5abeda841bc22757c1797de8681bbe81fbc735eeb1c10","impliedFormat":1},{"version":"8fd575e12870e9944c7e1d62e1f5a73fcf23dd8d3a321f2a2c74c20d022283fe","impliedFormat":1},{"version":"2ab096661c711e4a81cc464fa1e6feb929a54f5340b46b0a07ac6bbf857471f0","impliedFormat":1},{"version":"080941d9f9ff9307f7e27a83bcd888b7c8270716c39af943532438932ec1d0b9","affectsGlobalScope":true,"impliedFormat":1},{"version":"2e80ee7a49e8ac312cc11b77f1475804bee36b3b2bc896bead8b6e1266befb43","affectsGlobalScope":true,"impliedFormat":1},{"version":"d7a3c8b952931daebdfc7a2897c53c0a1c73624593fa070e46bd537e64dcd20a","affectsGlobalScope":true,"impliedFormat":1},{"version":"80e18897e5884b6723488d4f5652167e7bb5024f946743134ecc4aa4ee731f89","affectsGlobalScope":true,"impliedFormat":1},{"version":"cd034f499c6cdca722b60c04b5b1b78e058487a7085a8e0d6fb50809947ee573","affectsGlobalScope":true,"impliedFormat":1},{"version":"c57796738e7f83dbc4b8e65132f11a377649c00dd3eee333f672b8f0a6bea671","affectsGlobalScope":true,"impliedFormat":1},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true,"impliedFormat":1},{"version":"515d0b7b9bea2e31ea4ec968e9edd2c39d3eebf4a2d5cbd04e88639819ae3b71","affectsGlobalScope":true,"impliedFormat":1},{"version":"0559b1f683ac7505ae451f9a96ce4c3c92bdc71411651ca6ddb0e88baaaad6a3","affectsGlobalScope":true,"impliedFormat":1},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true,"impliedFormat":1},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true,"impliedFormat":1},{"version":"fb0f136d372979348d59b3f5020b4cdb81b5504192b1cacff5d1fbba29378aa1","affectsGlobalScope":true,"impliedFormat":1},{"version":"d15bea3d62cbbdb9797079416b8ac375ae99162a7fba5de2c6c505446486ac0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"68d18b664c9d32a7336a70235958b8997ebc1c3b8505f4f1ae2b7e7753b87618","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb3d66c8327153d8fa7dd03f9c58d351107fe824c79e9b56b462935176cdf12a","affectsGlobalScope":true,"impliedFormat":1},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true,"impliedFormat":1},{"version":"69ab18c3b76cd9b1be3d188eaf8bba06112ebbe2f47f6c322b5105a6fbc45a2e","affectsGlobalScope":true,"impliedFormat":1},{"version":"a680117f487a4d2f30ea46f1b4b7f58bef1480456e18ba53ee85c2746eeca012","affectsGlobalScope":true,"impliedFormat":1},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true,"impliedFormat":1},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true,"impliedFormat":1},{"version":"954296b30da6d508a104a3a0b5d96b76495c709785c1d11610908e63481ee667","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac9538681b19688c8eae65811b329d3744af679e0bdfa5d842d0e32524c73e1c","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a969edff4bd52585473d24995c5ef223f6652d6ef46193309b3921d65dd4376","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e9fbd7030c440b33d021da145d3232984c8bb7916f277e8ffd3dc2e3eae2bdb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true,"impliedFormat":1},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true,"impliedFormat":1},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true,"impliedFormat":1},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true,"impliedFormat":1},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true,"impliedFormat":1},{"version":"74f7fa2d027d5b33eb0471c8e82a6c87216223181ec31247c357a3e8e2fddc5b","affectsGlobalScope":true,"impliedFormat":1},{"version":"d6d7ae4d1f1f3772e2a3cde568ed08991a8ae34a080ff1151af28b7f798e22ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true,"impliedFormat":1},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true,"impliedFormat":1},{"version":"52ada8e0b6e0482b728070b7639ee42e83a9b1c22d205992756fe020fd9f4a47","affectsGlobalScope":true,"impliedFormat":1},{"version":"3bdefe1bfd4d6dee0e26f928f93ccc128f1b64d5d501ff4a8cf3c6371200e5e6","affectsGlobalScope":true,"impliedFormat":1},{"version":"59fb2c069260b4ba00b5643b907ef5d5341b167e7d1dbf58dfd895658bda2867","affectsGlobalScope":true,"impliedFormat":1},{"version":"639e512c0dfc3fad96a84caad71b8834d66329a1f28dc95e3946c9b58176c73a","affectsGlobalScope":true,"impliedFormat":1},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true,"impliedFormat":1},{"version":"af3dd424cf267428f30ccfc376f47a2c0114546b55c44d8c0f1d57d841e28d74","affectsGlobalScope":true,"impliedFormat":1},{"version":"995c005ab91a498455ea8dfb63aa9f83fa2ea793c3d8aa344be4a1678d06d399","affectsGlobalScope":true,"impliedFormat":1},{"version":"959d36cddf5e7d572a65045b876f2956c973a586da58e5d26cde519184fd9b8a","affectsGlobalScope":true,"impliedFormat":1},{"version":"965f36eae237dd74e6cca203a43e9ca801ce38824ead814728a2807b1910117d","affectsGlobalScope":true,"impliedFormat":1},{"version":"3925a6c820dcb1a06506c90b1577db1fdbf7705d65b62b99dce4be75c637e26b","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a3d63ef2b853447ec4f749d3f368ce642264246e02911fcb1590d8c161b8005","affectsGlobalScope":true,"impliedFormat":1},{"version":"8cdf8847677ac7d20486e54dd3fcf09eda95812ac8ace44b4418da1bbbab6eb8","affectsGlobalScope":true,"impliedFormat":1},{"version":"8444af78980e3b20b49324f4a16ba35024fef3ee069a0eb67616ea6ca821c47a","affectsGlobalScope":true,"impliedFormat":1},{"version":"3287d9d085fbd618c3971944b65b4be57859f5415f495b33a6adc994edd2f004","affectsGlobalScope":true,"impliedFormat":1},{"version":"b4b67b1a91182421f5df999988c690f14d813b9850b40acd06ed44691f6727ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"df83c2a6c73228b625b0beb6669c7ee2a09c914637e2d35170723ad49c0f5cd4","affectsGlobalScope":true,"impliedFormat":1},{"version":"436aaf437562f276ec2ddbee2f2cdedac7664c1e4c1d2c36839ddd582eeb3d0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e3c06ea092138bf9fa5e874a1fdbc9d54805d074bee1de31b99a11e2fec239d","affectsGlobalScope":true,"impliedFormat":1},{"version":"87dc0f382502f5bbce5129bdc0aea21e19a3abbc19259e0b43ae038a9fc4e326","affectsGlobalScope":true,"impliedFormat":1},{"version":"b1cb28af0c891c8c96b2d6b7be76bd394fddcfdb4709a20ba05a7c1605eea0f9","affectsGlobalScope":true,"impliedFormat":1},{"version":"2fef54945a13095fdb9b84f705f2b5994597640c46afeb2ce78352fab4cb3279","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac77cb3e8c6d3565793eb90a8373ee8033146315a3dbead3bde8db5eaf5e5ec6","affectsGlobalScope":true,"impliedFormat":1},{"version":"56e4ed5aab5f5920980066a9409bfaf53e6d21d3f8d020c17e4de584d29600ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ece9f17b3866cc077099c73f4983bddbcb1dc7ddb943227f1ec070f529dedd1","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a6282c8827e4b9a95f4bf4f5c205673ada31b982f50572d27103df8ceb8013c","affectsGlobalScope":true,"impliedFormat":1},{"version":"1c9319a09485199c1f7b0498f2988d6d2249793ef67edda49d1e584746be9032","affectsGlobalScope":true,"impliedFormat":1},{"version":"e3a2a0cee0f03ffdde24d89660eba2685bfbdeae955a6c67e8c4c9fd28928eeb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811c71eee4aa0ac5f7adf713323a5c41b0cf6c4e17367a34fbce379e12bbf0a4","affectsGlobalScope":true,"impliedFormat":1},{"version":"51ad4c928303041605b4d7ae32e0c1ee387d43a24cd6f1ebf4a2699e1076d4fa","affectsGlobalScope":true,"impliedFormat":1},{"version":"60037901da1a425516449b9a20073aa03386cce92f7a1fd902d7602be3a7c2e9","affectsGlobalScope":true,"impliedFormat":1},{"version":"d4b1d2c51d058fc21ec2629fff7a76249dec2e36e12960ea056e3ef89174080f","affectsGlobalScope":true,"impliedFormat":1},{"version":"22adec94ef7047a6c9d1af3cb96be87a335908bf9ef386ae9fd50eeb37f44c47","affectsGlobalScope":true,"impliedFormat":1},{"version":"4245fee526a7d1754529d19227ecbf3be066ff79ebb6a380d78e41648f2f224d","affectsGlobalScope":true,"impliedFormat":1},{"version":"73f78680d4c08509933daf80947902f6ff41b6230f94dd002ae372620adb0f60","affectsGlobalScope":true,"impliedFormat":1},{"version":"c5239f5c01bcfa9cd32f37c496cf19c61d69d37e48be9de612b541aac915805b","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e7f8264d0fb4c5339605a15daadb037bf238c10b654bb3eee14208f860a32ea","affectsGlobalScope":true,"impliedFormat":1},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true,"impliedFormat":1},{"version":"bde31fd423cd93b0eff97197a3f66df7c93e8c0c335cbeb113b7ff1ac35c23f4","impliedFormat":1},{"version":"89c5457ba4071e4c53a700195bc8e676ffa9cd0de990081e4911e71ba48316f0","affectsGlobalScope":true,"impliedFormat":1},{"version":"32df82919876280b76352a67ad8b6a3aa37f2ef49e9e60118c60dadcf08dc032","signature":"9ef4472ab03740503457dee2391c07de116685c333a40363590b9845d2989764"},{"version":"1bca27b5bf4c9f1b0751fd8a49b9977759861c56be999925fcc59cba354119ab","signature":"9d53c167fe2565fc093e63e018f57a613cee5b253bae2471230a5ebb7bab168e"},{"version":"364cc6ea06b1a620e955587bf820847fe6e3bb8f2a3d59cdf9a668aa2a4784db","signature":"2387a845165ef276caeb840dadad0287080b9634fd7c0cc0151175c31105270e"},{"version":"fd5b45663197c9093fc9da6f51eba7145f72256a7aedc051e84bcaa0a7b16800","signature":"14d5d080396c5b95bc7a406a46ba1519814f6e4b688f733c86e3f3787af3b520"},{"version":"39858bcf63b5423def8141f94cbaa6ac836ac226d66516e19732ef679aae15d2","signature":"a8da7d90a5cf974aa708a677a894632aa819877a2239da39fc1dbf9269030a3e"},{"version":"5240bcbece70ee55d8be9f061654a3c10454d3e819977f4bb63d8c9ea6a9fc20","signature":"5cd3be94de2f43bbb646c9c797af3ebc250fdf3e00ad348f06362eeb2067cfba"},{"version":"70e736447e467ca8bb14c4ee0778cc00e5ba7d865bbc715acf38c7c8d4d42f41","signature":"2a8f48ac4f5ecff2f963a553e6d5cd7d75daa1ca54957e6a5529b00232c93dc2"},{"version":"5198fe2b20994eb8ce29066b12e2cf6830f404e81e667058a99590c8825bbdb7","signature":"fbc663063a706edce82ca36e81085a54e9b412d60f638a1d84100552cc193cfc"},{"version":"a2ce3d3bba32ece20e938fbea55bc069d66f6c671ece28e481712971d6067d63","signature":"f69b536df9fd1382e82e671912b9f5985582aa0cb6faf8d1b7288463b7726d3a"},{"version":"08bb0830cad3d892eee782a296c9ca86b94cdd55cc702ac57e7b619f3ce8d7b0","signature":"705db0454bcfec04a6fbb402805ad893a0de08c4319388873e3abf0d279388e7"},{"version":"151ff381ef9ff8da2da9b9663ebf657eac35c4c9a19183420c05728f31a6761d","impliedFormat":1},{"version":"f3d8c757e148ad968f0d98697987db363070abada5f503da3c06aefd9d4248c1","impliedFormat":1}],"root":[[88,97]],"options":{"allowJs":true,"checkJs":false,"declaration":true,"module":99,"noEmitOnError":true,"outDir":"./js","removeComments":false,"sourceMap":true,"strict":true,"target":99,"tsBuildInfoFile":"./tsconfig.tsbuildinfo"},"referencedMap":[[93,1],[94,2],[95,2],[96,2],[91,2],[89,3],[97,2],[92,4],[90,5],[88,6]],"version":"5.9.2"}
\ No newline at end of file
diff --git a/crates/rust-client/src/account/mod.rs b/crates/rust-client/src/account/mod.rs
index d281c999..b778c957 100644
--- a/crates/rust-client/src/account/mod.rs
+++ b/crates/rust-client/src/account/mod.rs
@@ -63,6 +63,7 @@ pub use miden_objects::{
     },
     address::{AccountIdAddress, Address, AddressInterface, AddressType, NetworkId},
 };
+use miden_tx::utils::Serializable;
 
 use super::Client;
 use crate::errors::ClientError;
@@ -218,6 +219,49 @@ impl<AUTH> Client<AUTH> {
         self.add_account(&account, true).await
     }
 
+    /// Adds an [`Address`] to the associated [`AccountId`], alongside its derived [`NoteTag`].
+    ///
+    /// # Errors
+    /// - If the account is not found on the network.
+    /// - If the address is already being tracked.
+    pub async fn add_address(
+        &mut self,
+        address: Address,
+        account_id: AccountId,
+    ) -> Result<(), ClientError> {
+        let tracked_account = self.store.get_account(account_id).await?;
+        match tracked_account {
+            None => Err(ClientError::AccountDataNotFound(account_id)),
+            Some(_tracked_account) => {
+                // Check that the Address is not already tracked
+                let derived_note_tag = address.to_note_tag();
+                let note_tag_record =
+                    NoteTagRecord::with_account_source(derived_note_tag, account_id);
+                if self.store.get_note_tags().await?.contains(&note_tag_record) {
+                    let hex_address = hex::encode(address.to_bytes());
+                    return Err(ClientError::AddressAlreadyTracked(hex_address));
+                }
+
+                self.store.insert_address(address, account_id).await?;
+                Ok(())
+            },
+        }
+    }
+
+    /// Removes an [`Address`] from the associated [`AccountId`], alongside its derived [`NoteTag`].
+    ///
+    /// # Errors
+    /// - If the account is not found on the network.
+    /// - If the address is not being tracked.
+    pub async fn remove_address(
+        &mut self,
+        address: Address,
+        account_id: AccountId,
+    ) -> Result<(), ClientError> {
+        self.store.remove_address(address, account_id).await?;
+        Ok(())
+    }
+
     // ACCOUNT DATA RETRIEVAL
     // --------------------------------------------------------------------------------------------
 
diff --git a/crates/rust-client/src/errors.rs b/crates/rust-client/src/errors.rs
index ee275979..df654217 100644
--- a/crates/rust-client/src/errors.rs
+++ b/crates/rust-client/src/errors.rs
@@ -33,6 +33,8 @@ use crate::transaction::TransactionRequestError;
 pub enum ClientError {
     #[error("account with id {0} is already being tracked")]
     AccountAlreadyTracked(AccountId),
+    #[error("address {0} is already being tracked")]
+    AddressAlreadyTracked(String),
     #[error("account error")]
     AccountError(#[from] AccountError),
     #[error("account with id {0} is locked")]
diff --git a/crates/rust-client/src/store/mod.rs b/crates/rust-client/src/store/mod.rs
index 8e3b0c6c..04dfc8b1 100644
--- a/crates/rust-client/src/store/mod.rs
+++ b/crates/rust-client/src/store/mod.rs
@@ -291,6 +291,20 @@ pub trait Store: Send + Sync {
     /// Returns a `StoreError::AccountDataNotFound` if there is no account for the provided ID.
     async fn update_account(&self, new_account_state: &Account) -> Result<(), StoreError>;
 
+    /// Adds an [`Address`] to an [`Account`], alongside its derived note tag.
+    async fn insert_address(
+        &self,
+        address: Address,
+        account_id: AccountId,
+    ) -> Result<(), StoreError>;
+
+    /// Removes an [`Address`] from an [`Account`], alongside its derived note tag.
+    async fn remove_address(
+        &self,
+        address: Address,
+        account_id: AccountId,
+    ) -> Result<(), StoreError>;
+
     // SETTINGS
     // --------------------------------------------------------------------------------------------
 
diff --git a/crates/sqlite-store/src/account.rs b/crates/sqlite-store/src/account.rs
index ea048a93..f010e668 100644
--- a/crates/sqlite-store/src/account.rs
+++ b/crates/sqlite-store/src/account.rs
@@ -22,6 +22,7 @@ use miden_client::account::{
 use miden_client::asset::{Asset, AssetVault, AssetWitness, FungibleAsset, NonFungibleDeltaAction};
 use miden_client::crypto::{MerkleStore, SmtLeaf, SmtProof};
 use miden_client::store::{AccountRecord, AccountStatus, StoreError};
+use miden_client::sync::NoteTagRecord;
 use miden_client::utils::{Deserializable, Serializable};
 use miden_client::{AccountError, Felt, Word};
 use miden_objects::account::StorageMapWitness;
@@ -38,6 +39,7 @@ use crate::merkle_store::{
     update_storage_map_nodes,
 };
 use crate::sql_error::SqlResultExt;
+use crate::sync::{add_note_tag_tx, remove_note_tag_tx};
 use crate::{insert_sql, subst};
 
 // TYPES
@@ -361,6 +363,35 @@ impl SqliteStore {
         query_account_addresses(conn, account_id)
     }
 
+    pub(crate) fn insert_address(
+        tx: &Transaction<'_>,
+        address: &Address,
+        account_id: AccountId,
+    ) -> Result<(), StoreError> {
+        let derived_note_tag = address.to_note_tag();
+        let note_tag_record = NoteTagRecord::with_account_source(derived_note_tag, account_id);
+
+        add_note_tag_tx(tx, &note_tag_record)?;
+        Self::insert_address_internal(tx, address, account_id)?;
+
+        Ok(())
+    }
+
+    pub(crate) fn remove_address(
+        conn: &mut Connection,
+        address: &Address,
+        account_id: AccountId,
+    ) -> Result<(), StoreError> {
+        let derived_note_tag = address.to_note_tag();
+        let note_tag_record = NoteTagRecord::with_account_source(derived_note_tag, account_id);
+
+        let tx = conn.transaction().into_store_error()?;
+        remove_note_tag_tx(&tx, note_tag_record)?;
+        Self::remove_address_internal(&tx, address)?;
+
+        tx.commit().into_store_error()
+    }
+
     // ACCOUNT DELTA HELPERS
     // --------------------------------------------------------------------------------------------
 
@@ -807,7 +838,7 @@ impl SqliteStore {
         Ok(())
     }
 
-    fn insert_address(
+    fn insert_address_internal(
         tx: &Transaction<'_>,
         address: &Address,
         account_id: AccountId,
@@ -819,6 +850,15 @@ impl SqliteStore {
 
         Ok(())
     }
+
+    fn remove_address_internal(tx: &Transaction<'_>, address: &Address) -> Result<(), StoreError> {
+        let serialized_address = address.to_bytes();
+
+        const DELETE_QUERY: &str = "DELETE FROM addresses WHERE address = ?";
+        tx.execute(DELETE_QUERY, params![serialized_address]).into_store_error()?;
+
+        Ok(())
+    }
 }
 
 // HELPERS
diff --git a/crates/sqlite-store/src/lib.rs b/crates/sqlite-store/src/lib.rs
index ec53c323..e13067af 100644
--- a/crates/sqlite-store/src/lib.rs
+++ b/crates/sqlite-store/src/lib.rs
@@ -52,6 +52,7 @@ use rusqlite::Connection;
 use rusqlite::types::Value;
 
 use crate::merkle_store::{insert_asset_nodes, insert_storage_map_nodes};
+use crate::sql_error::SqlResultExt;
 
 mod account;
 mod chain_data;
@@ -431,6 +432,30 @@ impl Store for SqliteStore {
         })
         .await
     }
+
+    async fn insert_address(
+        &self,
+        address: Address,
+        account_id: AccountId,
+    ) -> Result<(), StoreError> {
+        self.interact_with_connection(move |conn| {
+            let tx = conn.transaction().into_store_error()?;
+            SqliteStore::insert_address(&tx, &address, account_id)?;
+            tx.commit().into_store_error()
+        })
+        .await
+    }
+
+    async fn remove_address(
+        &self,
+        address: Address,
+        account_id: AccountId,
+    ) -> Result<(), StoreError> {
+        self.interact_with_connection(move |conn| {
+            SqliteStore::remove_address(conn, &address, account_id)
+        })
+        .await
+    }
 }
 
 // UTILS
diff --git a/crates/testing/miden-client-tests/src/tests.rs b/crates/testing/miden-client-tests/src/tests.rs
index a5e9cfda..6b262023 100644
--- a/crates/testing/miden-client-tests/src/tests.rs
+++ b/crates/testing/miden-client-tests/src/tests.rs
@@ -12,7 +12,7 @@ use miden_client::note::{BlockNumber, NoteRelevance};
 use miden_client::rpc::NodeRpcClient;
 use miden_client::store::input_note_states::ConsumedAuthenticatedLocalNoteState;
 use miden_client::store::{InputNoteRecord, InputNoteState, NoteFilter, TransactionFilter};
-use miden_client::sync::NoteTagSource;
+use miden_client::sync::{NoteTagRecord, NoteTagSource};
 use miden_client::testing::account_id::ACCOUNT_ID_PUBLIC_NON_FUNGIBLE_FAUCET;
 use miden_client::testing::common::{
     ACCOUNT_ID_REGULAR,
@@ -2074,6 +2074,48 @@ async fn account_addresses_non_basic_wallet() {
     assert!(!retrieved_acc.addresses().contains(&basic_wallet_address));
 }
 
+#[tokio::test]
+async fn account_add_address_after_creation() {
+    // generate test client with a random store name
+    let (mut client, _rpc_api, _) = Box::pin(create_test_client()).await;
+
+    let account = Account::mock(
+        ACCOUNT_ID_PUBLIC_FUNGIBLE_FAUCET_2,
+        AuthRpoFalcon512::new(PublicKey::new(EMPTY_WORD)),
+    );
+
+    client.add_account(&account, false).await.unwrap();
+
+    let unspecified_default_address =
+        Address::AccountId(AccountIdAddress::new(account.id(), AddressInterface::Unspecified));
+
+    // The default unspecified address cannot be added
+    // as it is already present after account creation
+    assert!(client.add_address(unspecified_default_address, account.id()).await.is_err());
+
+    // The basic wallet address cannot be added
+    // as it is already present after account creation
+    let basic_wallet_address =
+        Address::AccountId(AccountIdAddress::new(account.id(), AddressInterface::BasicWallet));
+    assert!(client.add_address(basic_wallet_address.clone(), account.id()).await.is_err());
+
+    // We can remove the basic wallet address
+    assert!(client.remove_address(basic_wallet_address.clone(), account.id()).await.is_ok());
+
+    // Derived note tag should also be removed
+    let derived_note_tag = basic_wallet_address.to_note_tag();
+    let note_tag_record = NoteTagRecord::with_account_source(derived_note_tag, account.id());
+    let note_tags = client.get_note_tags().await.unwrap();
+    assert!(!note_tags.contains(&note_tag_record));
+
+    // Then add it again
+    assert!(client.add_address(basic_wallet_address, account.id()).await.is_ok());
+
+    // Derived note tag should now be available
+    let note_tags = client.get_note_tags().await.unwrap();
+    assert!(note_tags.contains(&note_tag_record));
+}
+
 // HELPERS
 // ================================================================================================
 
diff --git a/crates/web-client/package.json b/crates/web-client/package.json
index 2bf4bf47..cf3b0cb1 100644
--- a/crates/web-client/package.json
+++ b/crates/web-client/package.json
@@ -1,6 +1,6 @@
 {
   "name": "@demox-labs/miden-sdk",
-  "version": "0.12.0-next.21",
+  "version": "0.12.0-next.22",
   "description": "Miden Wasm SDK",
   "collaborators": [
     "Miden",
diff --git a/docs/src/cli-reference.md b/docs/src/cli-reference.md
index ec0282c9..99d66922 100644
--- a/docs/src/cli-reference.md
+++ b/docs/src/cli-reference.md
@@ -175,18 +175,6 @@ miden-client notes --show 0x70b7ec
 
 Sync the client with the latest state of the Miden network. Shows a brief summary at the end.
 
-### `tags`
-
-View and add tags.
-
-#### Action Flags
-
-| Flag            | Description                                                 | Aliases |
-|-----------------|-------------------------------------------------------------|---------|
-| `--list`        | List all tags monitored by this client                      | `-l`    |
-| `--add <tag>`   | Add a new tag to the list of tags monitored by this client  | `-a`    |
-| `--remove <tag>`| Remove a tag from the list of tags monitored by this client | `-r`    |
-
 ### `tx`
 
 View transactions.
@@ -243,6 +231,38 @@ The source account creates a `SWAP` note that offers some asset in exchange for
 
 Usage:  `miden-client swap --source <SOURCE ACCOUNT ID> --offered-asset <OFFERED AMOUNT>::<OFFERED FAUCET ID> --requested-asset <REQUESTED AMOUNT>::<REQUESTED FAUCET ID> --note-type <NOTE_TYPE>`
 
+### `addresses`
+
+View and manage addresses.
+
+#### Action Flags
+
+| Flags                      | Description                                                 | Short Flag |
+|----------------------------|-------------------------------------------------------------|------------|
+|`--list <ID>`               | List addresses for the specified account ID                 | `-l`       |
+|`--add <ID> <INTERFACE>`    | Bind an address for an interface for specified account ID   | `-a`       |
+|`--remove <ID> <INTERFACE>` | Remove an address for an interface for specified account ID | `-r`       |
+
+All commands require an account ID to be specified.
+
+The `--list` takes no arguments besides the account ID, and lists all addresses for that account:
+
+```sh
+miden-client addresses --list 0x17f13f4f83a8e8100c19d2961dfda2
+```
+
+The `--add` and `--remove` take and additional argument, which is the interface being added or removed, these values can be:
+- `unspecified`: The default interface.
+- `basic_wallet`: The basic wallet interface.
+
+```sh
+miden-client addresses 0x17f13f4f83a8e8100c19d2961dfda2 --remove basic_wallet
+```
+
+```sh
+miden-client addresses 0x17f13f4f83a8e8100c19d2961dfda2 --add basic_wallet
+```
+
 #### Tips
 For `send` and `consume-notes`, you can omit the `--sender` and `--account` flags to use the default account defined in the [config](./cli-config.md). If you omit the flag but have no default account defined in the config, you'll get an error instead.
 
