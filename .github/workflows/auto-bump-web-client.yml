name: Auto-bump Web Client SDK version

on:
  pull_request:
    branches: [ next ]
    types: [ opened, reopened, synchronize, labeled, unlabeled ]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-bump:
    if: contains(github.event.pull_request.labels.*.name, 'bump sdk')
    runs-on: ubuntu-latest

    steps:
      - name: Check out code (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read base version from next
        id: base
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin "${{ github.event.pull_request.base.ref }}" --depth=1
          # Read package.json at base
          if git cat-file -e origin/${{ github.event.pull_request.base.ref }}:crates/web-client/package.json 2>/dev/null; then
            BASE_VER=$(git show origin/${{ github.event.pull_request.base.ref }}:crates/web-client/package.json \
              | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>{console.log(JSON.parse(d).version||'')})")
          else
            BASE_VER=""
          fi
          echo "version=$BASE_VER" >> "$GITHUB_OUTPUT"

      - name: Read head version
        id: head
        shell: bash
        run: |
          set -euo pipefail
          HEAD_VER=$(node -p "require('./crates/web-client/package.json').version")
          echo "version=$HEAD_VER" >> "$GITHUB_OUTPUT"

      - name: Report versions
        shell: bash
        run: |
          echo "Base (next) version: ${{ steps.base.outputs.version }}"
          echo "Head (PR) version:  ${{ steps.head.outputs.version }}"

      - name: Skip - already bumped
        if: steps.base.outputs.version != '' && steps.head.outputs.version != steps.base.outputs.version
        run: echo "âœ… Version already bumped on this PR."

      - name: Bump patch version in web-client
        if: steps.base.outputs.version != '' && steps.head.outputs.version == steps.base.outputs.version
        shell: bash
        run: |
          set -euo pipefail
          cd crates/web-client
          node -e "const fs=require('fs');const p='package.json';const j=JSON.parse(fs.readFileSync(p,'utf8'));const parts=j.version.split('.').map(n=>parseInt(n,10));if(parts.length!==3||parts.some(Number.isNaN)){throw new Error('Invalid semver in package.json: '+j.version)};parts[2]+=1;j.version=parts.join('.');fs.writeFileSync(p,JSON.stringify(j,null,2)+'\n');console.log(j.version)" | tee ../.new-version

      - name: Commit and push bump
        if: steps.base.outputs.version != '' && steps.head.outputs.version == steps.base.outputs.version && github.event.pull_request.head.repo.full_name == github.repository
        shell: bash
        env:
          PR_REF: ${{ github.event.pull_request.head.ref }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          NEW_VER=$(cat crates/.new-version)
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add crates/web-client/package.json
          git commit -m "chore(web-client): bump version to ${NEW_VER} for PR #${PR_NUMBER}"
          git push origin "HEAD:${PR_REF}"

      - name: Warn - cannot push to fork
        if: steps.base.outputs.version != '' && steps.head.outputs.version == steps.base.outputs.version && github.event.pull_request.head.repo.full_name != github.repository
        run: echo "::warning ::PR comes from a fork; cannot push autogenerated bump. Please bump version manually."

