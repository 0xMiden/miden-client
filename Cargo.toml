[workspace]
resolver = "2"

members = [
  "bin/integration-tests",
  "bin/miden-cli",
  "crates/rust-client",
  "crates/testing/node-builder",
  "crates/testing/prover",
  "crates/web-client",
]

default-members = ["bin/miden-cli", "crates/rust-client"]

[workspace.package]
authors      = ["miden contributors"]
edition      = "2024"
license      = "MIT"
repository   = "https://github.com/0xMiden/miden-client"
rust-version = "1.88"
version      = "0.11.0"

[workspace.dependencies]
# Miden dependencies
miden-lib = { branch = "next", default-features = false, git = "https://github.com/0xMiden/miden-base" }
miden-node-block-producer = { branch = "next", git = "https://github.com/0xMiden/miden-node" }
miden-node-ntx-builder = { branch = "next", git = "https://github.com/0xMiden/miden-node" }
miden-node-proto-build = { branch = "next", default-features = false, git = "https://github.com/0xMiden/miden-node" }
miden-node-rpc = { branch = "next", git = "https://github.com/0xMiden/miden-node" }
miden-node-store = { branch = "next", git = "https://github.com/0xMiden/miden-node" }
miden-node-utils = { branch = "next", git = "https://github.com/0xMiden/miden-node" }
miden-objects = { branch = "next", default-features = false, git = "https://github.com/0xMiden/miden-base" }
miden-remote-prover = { branch = "next", features = ["concurrent"], git = "https://github.com/0xMiden/miden-node" }
miden-remote-prover-client = { branch = "next", default-features = false, features = [
  "tx-prover",
], git = "https://github.com/0xMiden/miden-node" }
miden-testing = { branch = "next", default-features = false, features = [
], git = "https://github.com/0xMiden/miden-base" }
miden-tx = { branch = "next", default-features = false, git = "https://github.com/0xMiden/miden-base" }

# External dependencies
anyhow      = { version = "1.0", default-features = false }
async-trait = "0.1"
miette      = { features = ["fancy"], version = "7.6" }
rand        = { version = "0.9" }
serde       = { features = ["derive"], version = "1.0" }
thiserror   = { default-features = false, version = "2.0" }
tokio       = { features = ["macros", "net", "rt-multi-thread"], version = "1.40" }
tracing     = { version = "0.1" }

# Lints are set to warn for development, which are promoted to errors in CI.
[workspace.lints.clippy]
# Pedantic lints are set to a lower priority which allows lints in the group to be selectively enabled.
pedantic = { level = "warn", priority = -1 }
# cast_possible_truncation =   "allow"  # Overly many instances especially regarding indices.
ignored_unit_patterns       = "allow" # Stylistic choice.
missing_errors_doc          = "allow" # TODO: fixup and enable this.
missing_panics_doc          = "allow" # TODO: fixup and enable this.
module_name_repetitions     = "allow" # Many triggers, and is a stylistic choice.
must_use_candidate          = "allow" # This marks many fn's which isn't helpful.
should_panic_without_expect = "allow" # We don't care about the specific panic message.
# End of pedantic lints.
